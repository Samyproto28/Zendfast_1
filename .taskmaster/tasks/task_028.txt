# Task ID: 28
# Title: Integrar youtube_player_flutter para reproducción de videos
# Status: pending
# Dependencies: 27
# Priority: low
# Description: Implementar reproductor de video embebido para contenido educativo de YouTube con controles nativos
# Details:
Instalar youtube_player_flutter ^8.0.0. Crear VideoPlayerScreen que extraiga video ID desde URL y muestre YoutubePlayer widget. Implementar fullscreen mode, autoplay settings, quality selection. Manejar estados: loading, playing, paused, error. Fallback a external browser si embedding fails. Considerar Picture-in-Picture para premium users. Trackear video completion para analytics.

# Test Strategy:
Probar playback en iOS y Android, verificar fullscreen funciona, validar external fallback cuando needed

# Subtasks:
## 1. Instalar y configurar youtube_player_flutter SDK [pending]
### Dependencies: None
### Description: Instalar el paquete youtube_player_flutter v8.0.0 y configurar los permisos necesarios para reproducción de video
### Details:
Agregar youtube_player_flutter: ^8.0.0 al pubspec.yaml. Configurar permisos de internet en Android manifest y iOS Info.plist. Importar el paquete en los archivos necesarios. Verificar compatibilidad con la versión actual de Flutter del proyecto.

## 2. Crear VideoPlayerScreen con extracción de video ID [pending]
### Dependencies: 28.1
### Description: Implementar pantalla de reproductor que extraiga el ID del video desde URL de YouTube y renderice el widget YoutubePlayer
### Details:
Crear VideoPlayerScreen widget que reciba URL de YouTube como parámetro. Implementar función para extraer video ID usando regex o parsing de URL. Configurar YoutubePlayer widget con video ID extraído. Implementar UI básica con controles de reproducción. Manejar casos edge como URLs inválidas o formatos no soportados.

## 3. Implementar controles avanzados y manejo de estados [pending]
### Dependencies: 28.2
### Description: Agregar funcionalidades de pantalla completa, autoplay, calidad y manejo completo de estados del reproductor
### Details:
Implementar modo fullscreen con rotación automática. Configurar opciones de autoplay y selección de calidad. Manejar estados: loading, playing, paused, error con UI apropiada. Implementar fallback a navegador externo cuando embedding falla. Considerar Picture-in-Picture para usuarios premium. Agregar tracking de completado de video para analytics.


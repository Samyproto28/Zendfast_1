# Task ID: 16
# Title: Crear modelo UserProfile con cálculo de hidratación
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Implementar perfil de usuario con peso, altura y cálculo automático de meta diaria de hidratación
# Details:
Crear @collection UserProfile con fields: String id (auth user id), double weightKg, int? heightCm, int dailyHydrationGoal (computed), DateTime createdAt, DateTime updatedAt. Implementar getter que calcula hydration goal: weightKg * 32 ml. Crear UserProfileRepository con CRUD operations y sync con Supabase user_profiles table. Manejar conversiones unidades si necesario (kg/lbs).

# Test Strategy:
Verificar cálculo hidratación correcto (ej: 70kg = 2240ml), probar updates se sincronizan, validar datos persisten

# Subtasks:
## 1. Definir esquema UserProfile con campos básicos [pending]
### Dependencies: None
### Description: Crear la clase UserProfile con decorador @collection de Isar y definir todos los campos necesarios para el perfil de usuario
### Details:
Implementar @collection class UserProfile con campos: String id (auth user id), double weightKg, int? heightCm, DateTime createdAt, DateTime updatedAt. Configurar índices apropiados y relaciones con auth user. Definir constraints de validación para peso y altura.

## 2. Implementar cálculo automático de meta de hidratación [pending]
### Dependencies: 16.1
### Description: Agregar getter dailyHydrationGoal que calcule automáticamente la meta diaria basada en el peso del usuario
### Details:
Implementar getter int get dailyHydrationGoal que calcule weightKg * 32 ml. Manejar casos edge como peso nulo o inválido. Agregar método helper para convertir entre unidades (kg/lbs) si es necesario. Documentar fórmula utilizada.

## 3. Crear UserProfileRepository con operaciones CRUD y sync Supabase [pending]
### Dependencies: 16.1, 16.2
### Description: Implementar repositorio completo para manejar operaciones de base de datos local y sincronización con Supabase
### Details:
Crear UserProfileRepository con métodos: create, read, update, delete, getByUserId. Implementar sync bidireccional con tabla user_profiles de Supabase. Manejar conflictos de sincronización y offline storage. Agregar toJson/fromJson para serialización.


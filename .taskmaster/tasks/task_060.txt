# Task ID: 60
# Title: Implementar sistema de backup automático de datos con exportación periódica a Supabase Storage
# Status: pending
# Dependencies: 48, 49
# Priority: medium
# Description: Desarrollar sistema completo de backup automático diario para datos Isar locales con exportación cifrada a Supabase Storage y funcionalidad de restauración.
# Details:
Crear BackupService singleton con métodos createBackup(), uploadToSupabase(), downloadBackup(), restoreFromBackup(). Implementar backup diario usando flutter_background_service scheduler que exporte todas las colecciones Isar (FastingSession, UserProfile, HydrationLog, ContentItem) a JSON. Cifrar backups usando dart:convert y crypto package con AES-256-GCM antes de upload a Supabase Storage bucket 'user-backups'. Structure: /backups/{userId}/{timestamp}_backup.json.encrypted. Implementar BackupManager con BackupMetadata model para tracking: timestamp, fileSize, collections, isEncrypted. Crear UI en settings para manual backup, restore, y download complete data (GDPR). Implementar conflict resolution para restore (user choice to overwrite/merge). Usar shared_preferences para backup schedule config y last backup timestamp. Agregar compression con gzip antes encryption para optimize storage.

# Test Strategy:
Verificar backup automático se ejecuta diariamente, probar encryption/decryption de datos funciona correctamente, validar upload y download desde Supabase Storage exitoso, confirmar restauración completa no pierde datos, probar GDPR export genera JSON válido con todos los datos de usuario

# Subtasks:
## 1. Implementar BackupService con scheduling automático diario [pending]
### Dependencies: None
### Description: Desarrollar servicio singleton para manejo de backups automáticos con scheduler en background que exporte datos Isar a JSON diariamente
### Details:
Crear BackupService singleton con métodos createBackup(), scheduleAutomaticBackup(). Implementar flutter_background_service para ejecutar backup diario automático. Exportar todas las colecciones Isar (FastingSession, UserProfile, HydrationLog, ContentItem) a formato JSON. Usar shared_preferences para configurar horario de backup y guardar timestamp del último backup. Implementar compresión gzip de datos antes del cifrado para optimizar almacenamiento.

## 2. Desarrollar sistema de cifrado AES-256-GCM y upload a Supabase Storage [pending]
### Dependencies: 60.1
### Description: Implementar cifrado seguro de backups con AES-256-GCM y sistema de upload/download desde Supabase Storage con estructura organizada
### Details:
Implementar cifrado AES-256-GCM usando crypto package para encriptar backups JSON comprimidos. Crear métodos uploadToSupabase() y downloadBackup() en BackupService. Configurar Supabase Storage bucket 'user-backups' con estructura /backups/{userId}/{timestamp}_backup.json.encrypted. Implementar BackupMetadata model para tracking de metadatos: timestamp, fileSize, collections incluidas, isEncrypted. Manejar autenticación y permisos de Supabase Storage.

## 3. Crear UI de gestión de backups con restore y exportación GDPR [pending]
### Dependencies: 60.2
### Description: Desarrollar interfaz de usuario completa para gestión manual de backups, restauración de datos y exportación GDPR en configuraciones
### Details:
Crear BackupManager para orchestrar operaciones UI. Implementar pantalla en settings con opciones: backup manual, restaurar desde backup, descargar datos completos (GDPR export). Desarrollar restoreFromBackup() con conflict resolution permitiendo al usuario elegir entre sobrescribir o fusionar datos. Crear UI intuitiva para mostrar backups disponibles, fechas, tamaños. Implementar progress indicators para operaciones largas. Agregar validación de integridad antes de restauración.


# Task ID: 57
# Title: Implementar sistema completo de analytics y tracking de eventos en analytics_events de Supabase
# Status: pending
# Dependencies: 48, 52
# Priority: high
# Description: Desarrollar un sistema robusto de analytics que rastree eventos críticos del usuario, implemente embudo de conversión, métricas de retención y sincronización offline/online
# Details:
Crear AnalyticsService que maneje tracking de eventos críticos: fast_started, fast_completed, fast_interrupted, panic_button_used, meditation_completed, premium_conversion, paywall_shown, app_opened, user_registered. Implementar AnalyticsEvent model con fields: id, user_id, event_name, properties (JSON), timestamp, session_id, platform, app_version. Crear AnalyticsRepository con Isar para storage offline y sync automático con analytics_events table en Supabase. Implementar FunnelAnalytics class para trackear conversion funnel: registration → first_fast → fast_completion → premium_trial → premium_conversion. Desarrollar RetentionMetrics para calcular day 1, 7, 30 retention rates. Crear EngagementMetrics para session duration, feature usage frequency, panic button correlation. Implementar EventBatcher para optimizar network requests enviando eventos en batch cada 30 segundos o 10 eventos. Agregar offline queue con retry logic para eventos fallidos. Crear AnalyticsDashboard widget para visualizar métricas key con charts usando fl_chart package. Implementar privacy-compliant tracking sin PII, hash user identifiers. Configurar automated funnel analysis con cohort tracking mensual.

# Test Strategy:
Verificar todos los eventos críticos se registran correctamente tanto online como offline. Probar sincronización automática funciona tras reconexión. Validar embudo de conversión calcula métricas precisas. Verificar retención y engagement metrics son exactos comparando con data manual. Probar performance del EventBatcher bajo carga alta. Validar privacy compliance verificando no se almacena PII. Testear dashboard muestra visualizaciones correctas. Verificar eventos persisten tras force-close de app.

# Subtasks:
## 1. Implementar servicio base de analytics y modelo de eventos [pending]
### Dependencies: None
### Description: Crear AnalyticsService principal que maneje tracking de eventos críticos del usuario y implementar modelo AnalyticsEvent con campos necesarios para almacenamiento local y remoto
### Details:
Desarrollar AnalyticsService con métodos para trackear eventos: fast_started, fast_completed, fast_interrupted, panic_button_used, meditation_completed, premium_conversion, paywall_shown, app_opened, user_registered. Implementar AnalyticsEvent model con campos: id, user_id, event_name, properties (JSON), timestamp, session_id, platform, app_version. Configurar privacy-compliant tracking sin PII, hash user identifiers. Establecer base para dependency injection con Riverpod.

## 2. Desarrollar métricas de funnel y retención [pending]
### Dependencies: 57.1
### Description: Implementar clases especializadas para calcular métricas de conversión, análisis de embudo y tasas de retención de usuarios
### Details:
Crear FunnelAnalytics class para trackear conversion funnel: registration → first_fast → fast_completion → premium_trial → premium_conversion. Desarrollar RetentionMetrics para calcular day 1, 7, 30 retention rates con cohort tracking mensual. Implementar EngagementMetrics para session duration, feature usage frequency, panic button correlation. Configurar automated funnel analysis con algoritmos de cálculo eficientes.

## 3. Implementar sistema de batching y sincronización offline [pending]
### Dependencies: 57.1
### Description: Desarrollar AnalyticsRepository con almacenamiento local Isar y sistema de sincronización automática con Supabase incluyendo cola offline y retry logic
### Details:
Crear AnalyticsRepository con Isar para storage offline y sync automático con analytics_events table en Supabase. Implementar EventBatcher para optimizar network requests enviando eventos en batch cada 30 segundos o 10 eventos. Agregar offline queue con retry logic para eventos fallidos. Configurar background sync que funcione cuando app vuelve a estar online. Implementar conflict resolution para eventos duplicados.

## 4. Crear dashboard de visualización de métricas [pending]
### Dependencies: 57.2, 57.3
### Description: Desarrollar AnalyticsDashboard widget con charts interactivos para visualizar métricas clave usando fl_chart package
### Details:
Crear AnalyticsDashboard widget para visualizar métricas key con charts usando fl_chart package. Implementar gráficos para funnel conversion, retention curves, engagement trends, y event frequency. Agregar filtros por fecha range y tipo de evento. Crear widgets específicos para mostrar KPIs principales: DAU, conversion rate, average session duration. Implementar responsive design que funcione en diferentes tamaños de pantalla.


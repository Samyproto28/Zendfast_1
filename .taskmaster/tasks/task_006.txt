# Task ID: 6
# Title: Implementar sistema de autenticación con Supabase Auth
# Status: done
# Dependencies: 3
# Priority: high
# Description: Crear flujos completos de registro, login y logout con validación de email y manejo de estados de sesión
# Details:
Crear AuthService con métodos async para signUp, signIn, signOut usando Supabase Auth. Implementar validación email format, password strength (8+ caracteres). Crear Riverpod authStateProvider que exponga User? y isAuthenticated. Manejar estados loading, error, success. Implementar auto-login si sesión válida existe. Crear pantallas LoginScreen y RegisterScreen con formularios responsive.

# Test Strategy:
Pruebas unitarias para validaciones, pruebas de integración para flows completos, verificar sesión persiste tras reinicio app

# Subtasks:
## 1. Configurar Supabase Auth y crear servicio base de autenticación [done]
### Dependencies: None
### Description: Configurar la instancia de Supabase en el proyecto Flutter e implementar la clase AuthService con los métodos básicos de autenticación
### Details:
Instalar dependencias supabase_flutter. Configurar SUPABASE_URL y SUPABASE_ANON_KEY en variables de entorno. Crear clase AuthService con SupabaseClient instance. Implementar métodos async signUp(email, password), signIn(email, password), signOut(), getCurrentUser(). Agregar validaciones básicas de email format usando RegExp y password strength (mínimo 8 caracteres). Manejar SupabaseException y retornar Result<User, AuthError> custom types.

## 2. Implementar estado global de autenticación con Riverpod [done]
### Dependencies: 6.1
### Description: Crear providers de Riverpod para manejar el estado de autenticación y sesión del usuario en toda la aplicación
### Details:
Crear authStateProvider usando StateNotifierProvider que exponga AuthState{User? user, bool isLoading, String? error, bool isAuthenticated}. Implementar AuthStateNotifier que utilice AuthService y escuche cambios de sesión via Supabase.auth.onAuthStateChange. Crear computed provider isAuthenticatedProvider que retorne bool. Implementar auto-login verificando sesión existente al iniciar app. Manejar estados de loading durante operaciones async.

## 3. Crear pantallas de Login y Registro con formularios validados [done]
### Dependencies: 6.2
### Description: Desarrollar las interfaces de usuario para login y registro con validación en tiempo real y manejo de estados
### Details:
Crear LoginScreen y RegisterScreen con formularios usando TextFormField y GlobalKey<FormState>. Implementar validación en tiempo real para email y password con visual feedback. Agregar botones con loading states que consumen authStateProvider. Implementar navigation entre pantallas y redirect automático tras login exitoso. Diseño responsive con constraints para diferentes tamaños de pantalla. Agregar error messages user-friendly y loading indicators durante auth operations.

